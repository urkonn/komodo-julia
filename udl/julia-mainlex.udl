# UDL lexer for Julia.
#
# Note: UDL is a state machine and it uses regular expressions to move between
#       the different language states.
#

language Julia

################ Boilerplate ################

# Boilerplate - need to start with family set to markup and IN_M_DEFAULT state,
# we'll later perform a null-transition change to get into the SSL state.
family markup
initial IN_M_DEFAULT
# Null-transition to get into SSL state
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT

################ Language Start ################

family ssl # server side language

# Specify the min and max styles we'll be referring to.
start_style SSL_DEFAULT
end_style SSL_VARIABLE

# If the language has keywords, specify which style needs to be transformed
keyword_style SSL_IDENTIFIER => SSL_WORD
keywords [
        # Keywords
        "function",
        "global",
        "for",
        "end",
        "while",
        "if",
        "else",
        "elseif",
        "break",
        "switch",
        "case",
        "otherwise",
        "try",
        "catch",
        "end",
        "const",
        "immutable",
        "import",
        "importall",
        "export",
        "type",
        "typealias",
        "return",
        "true",
        "false",
        "macro",
        "quote",
        "in",
        "abstract",
        "module",
        "using",
        "continue",
        "ifelse",
        "do",
        "eval",
        "let",
        "finally",
        "throw",
        "Array",
        "String",
        "Bool",
        "Number",
        "Int",
        "Integer",
        "Real",
        "Complex",
        "FloatingPoint",
        "Float64",
        "Float32",
        "Int8",
        "Int16",
        "Int32",
        "Int64",
        "Rational",
        "AbstractArray",
        "Unsigned",
        "Signed",
        "Uint",
        "Uint8",
        "Uint16",
        "Uint32",
        "Uint64",
        "Vector",
        "AbstractVector",
        "Matrix",
        "AbstractMatrix",
        "Type",
        "IO",
        "Any",
        "ASCIIString",
        "Union",
        "Dict",
        "Function",
        "SubArray",
        "Range",
        "Range1",
        "Symbol",
        "Expr",
        "cell",
        "collect",
        "filter",
        "merge",
        "divrem",
        "hex",
        "dec",
        "oct",
        "base",
        "int",
        "round",
        "cmp",
        "float",
        "linspace",
        "fill",
        ",",
        "start",
        "done",
        "tuple",
        "minimum",
        "maximum",
        "count",
        "index",
        "append",
        "push",
        "pop",
        "shift",
        "unshift",
        "insert",
        "splice",
        "reverse",
        "sort",
        "zip",
        "length",
        "delete",
        "copy",
        "haskey",
        "keys",
        "values",
        "get",
        "getkey",
        "Set",
        "isa",
        "issubset",
        "intersect",
        "setdiff",
        "symdiff",
        "complement",
        "print",
        "printf",
        "println",
        "sprintf",
        "join",
        "utf8",
        "char",
        "search",
        "rsearch",
        "beginswith",
        "endswith",
        "replace",
        "lowercase",
        "uppercase",
        "ucfirst",
        "lcfirst",
        "split",
        "rsplit",
        "chop",
        "chomp",
        "lpad",
        "rpad",
        "lstrip",
        "rstrip",
        "strip",
        "isalnum",
        "isalpha",
        "isascii",
        "isblank",
        "iscntrl",
        "isdigit",
        "isgraph",
        "islower",
        "isprint",
        "ispunct",
        "isspace",
        "isupper",
        "isxdigit",
        "match",
        "captures",
        "offset",
        "offsets",
        "matchall",
        "eachmatch",
        "hcat",
        "vcat",
        "hvcat",
        "reshape",
        "deepcopy",
        "similar",
        "reinterpret",
        "map",
        "reduce",
        "mapreduce",
        "DataArray",
        "DataFrame",
        "removeNA",
        "replaceNA",
        "colnames",
        "head",
        "tail",
        "describe",
        "join",
        "groupby"

        ]

# Set the basic patterns we'll be using for styling transitions.
# For most programming languages, names cannot start with a number, but they
# often allow a number after the first character - e.g. "bar21a"
pattern FIRSTNAMECHAR = '_a-zA-Z\x80-\xff' # names (identifier, keyword, variable...) only can start with these chars
pattern NAMECHAR = '$FIRSTNAMECHAR\d'      # rest of the name, after the first char
pattern WS = '\s\t\r\n'                    # whitespace
pattern OP = '!#%&\(\)\*\+,-\.\/:;<=>\?@\[\]\^\{\}~|'  # operator characters - escaping special regex values

################ Default Style ################

# Define what happens when in default (initial) state. This is where we set up
# the transitions to other states.
state IN_SSL_DEFAULT:

# ----------- Entering Comments ---------- #

# C-style one line comments
#'//' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# Hash-style one line comments
'#' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# SQL-style one line comments
#'--' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# Lisp-style one line comments
#';' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# Erlang-style one line comments
#'%' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# C-style block comments
#'/*' : paint(upto, SSL_DEFAULT), => IN_SSL_COMMENT_C_BLOCK

# Pascal-style block comments
#'(*' : paint(upto, SSL_DEFAULT), => IN_SSL_COMMENT_PASCAL_BLOCK

# ----------- Entering Whitespace ---------- #

# Just stay in whatever style we currently are using.
/[$WS]+/  : #stay

# ----------- Entering Strings ---------- #

'"' : paint(upto, SSL_DEFAULT), => IN_SSL_DSTRING
'\'' : paint(upto, SSL_DEFAULT), => IN_SSL_SSTRING
'`' : paint(upto, SSL_DEFAULT), => IN_SSL_XSTRING

# ----------- Entering Numbers ---------- #

# Go process a number, try to do it in regexes octal and hex first.
/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)  # Hex numbers
/[-+]?0[0-7]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)       # Octal numbers
/[-+]?[1-9]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)        # Regular numbers

# ----------- Entering Identifiers ---------- #

/[$FIRSTNAMECHAR][$NAMECHAR]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)

# ----------- Entering Operators ---------- #

/[$OP]/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR)


################ In Comments - determines how we exit a comment ################

state IN_SSL_COMMENT_TO_EOL: 
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT  # back to default state

state IN_SSL_COMMENT_C_BLOCK: 
'*/' : paint(include, SSL_COMMENTBLOCK), => IN_SSL_DEFAULT  # back to default state

state IN_SSL_COMMENT_PASCAL_BLOCK: 
'*)' : paint(include, SSL_COMMENTBLOCK), => IN_SSL_DEFAULT  # back to default state

################ In Strings - determines how we exit a string ################

state IN_SSL_DSTRING:
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
/\\./ : #stay, anything escaped means it's still a string

state IN_SSL_SSTRING:
'\'' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
/\\./ : #stay, anything escaped means it's still a string

state IN_SSL_XSTRING:
'`' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
/\\./ : #stay, anything escaped means it's still a string

################ End of State Handling ################


################ Fold Handling ################

# Uncomment to enable folding on "{" and "}"

#fold "{" SSL_OPERATOR +
#fold "}" SSL_OPERATOR -

################ End of Fold Handling ################
